
#
# Running Ethereum
#
#
# To run ethereum without getting new blocks
#
#
alias gethnd='geth --rpc --rpccorsdomain "http://localhost:3000" --maxpeers 0'
alias gethnd6='geth --rpc --rpccorsdomain "http://localhost:3000" --maxpeers 0 --verbosity 5'
#
# Turn on shh too
#
alias gethshh='geth --rpc --rpccorsdomain "http://localhost:3000" --maxpeers 0 -shh'
#
# Turn on the console
#
alias gethndc='geth --rpc --rpccorsdomain "http://localhost:3000" --maxpeers 0 console'
#
#
# Run normally downloading all of the data
# This allows P2P to run without turning it off
#
alias rgeth='geth --rpc --rpccorsdomain "http://localhost:3000"'
#
#
# Run normally downloading all of the data and starting up a console
#  This allows P2P to run without turning it off
#
alias rgethc='geth --rpc --rpccorsdomain "http://localhost:3000" console'
#
#
#   Testing how to fire up private networks
#   This works and the key parameter is --nodiscover
#   And now admin.addPeer works
#
alias gethp1='geth --nodiscover --datadir /tmp67/p1 --rpc --rpccorsdomain "http://localhost:3000"'
alias gethp2='geth --nodiscover --datadir /tmp67/p2 --port 30313 --rpcaddr 8555'

###
# To Create the genesis state of the network see top level Readme
alias gethinit1='geth init /tmp67/ethgenesis/genesis1.json'
###
# Then run bootnode

# Then use the enode from the bootnode command to fire up your geth

### Run the individual geth nodes {1,2}

alias gethboot1='geth --dev --verbosity 9 --datadir /tmp67/why1 --bootnodes enode://7db227d7094ce215c3a0f57e1bcc732551fe351f94249471934567e0f5dc1bf795962b8cccb87a2eb56b29fbe37d614e2f4c3c45b789ae4f1f51f4cb21972ffd@[127.0.0.1]:30301'
alias gethboot2='geth --dev --verbosity 9 --datadir /tmp67/why2 --bootnodes enode://4646ae5047316b4230d0086c8acec687f00b1cd9d1dc634f6cb358ac0a9a8ffffe77b4dd0a4bfb95851f3b7355c781dd60f8418fc8a65d14907aff47c903a559@[127.0.0.1]:30301'

alias geth0='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 0'
alias geth1='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 1'
alias geth2='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 2'
alias geth3='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 3'
alias geth4='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 4'
alias geth5='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 5'
alias geth6='geth --rpc --rpccorsdomain "http://localhost:3000" --verbosity 6'

### Just show all of the current data, don't get new blocks
alias gethnnd='geth --rpc --rpccorsdomain "http://localhost:3000" --nodiscover'

### Test network with just one block in it
alias getht='geth --olympic --datadir "/tmp77" --rpc --rpccorsdomain "http://localhost:3000"'

### Attach to the individual geth nodes {1,2,3}

alias at1='geth attach ipc://tmp67/why1/geth.ipc'
alias at2='geth attach ipc://tmp67/why2/geth.ipc'
alias at3='geth attach ipc://tmp67/why3/geth.ipc'

#
# For running with the console and solidity
#

alias sgethjs='geth --maxpeers 0 --rpc --rpcapi="db,eth,net,web3,personal" --rpcport "8545" --rpcaddr "127.0.0.1" --rpccorsdomain "localhost" --solc solcjs console'

alias sgeth='geth --maxpeers 0 --rpc --rpcapi="db,eth,net,web3,personal" --rpcport "8545" --rpcaddr "127.0.0.1" --rpccorsdomain "localhost" --solc /tmp70/solidity/build/solc/solc console'


#
# End Running Ethereum
#
#------------------------------------------------------------------------------------

###
# To run the block explorer
#
alias rgethx='cd /tmp82/explorer; npm start'
###

### Start Bootnode
##
## You need 64 hex digits to represent the information that can be stored in 256 bits
##

alias bn1='bootnode --nodekeyhex 289c2857d4598e37fb9647507e47a309d6133539bf21a8b9cb6df88fd5232032'
alias bn2='bootnode --nodekeyhex 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef'
alias bn3='bootnode -genkey hi -verbosity 9'

### End Bootnode
##

alias mketh='mkdir src; cd src; mkdir github.com; cd github.com; mkdir ethereum; cd ethereum'
alias mketh1='mkdir src; cd src; mkdir github.com; cd github.com; mkdir ethereum; cd ethereum; mkdir go-ethereum; cd go-ethereum'

alias mktrie='mkdir src; cd src; mkdir github.com; cd github.com; mkdir stormasm; cd stormasm'

### Paths to ethereum cmd structure
#
#
#

alias cmd='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd'

alias cmde='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/geth'
alias cmdg='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/geth'
alias cmdeth='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/geth'
alias cmdgeth='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/geth'

alias cmds='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/swarm'
alias cmdswarm='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/swarm'

alias cmdw='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/wnode'
alias cmdwnode='cd $GOPATH/src/github.com/ethereum/go-ethereum/cmd/wnode'

### Paths to ethereum dir structure
alias eth='cd $GOPATH/src/github.com/ethereum/go-ethereum'
alias ethp2p='cd $GOPATH/src/github.com/ethereum/go-ethereum/p2p'
alias ethpro='cd $GOPATH/src/github.com/ethereum/go-ethereum/p2p/protocols'
alias ethrpc='cd $GOPATH/src/github.com/ethereum/go-ethereum/rpc'
alias ethsw='cd $GOPATH/src/github.com/ethereum/go-ethereum/swarm'
alias ethswarm='cd $GOPATH/src/github.com/ethereum/go-ethereum/swarm'
alias ethtest='cd $GOPATH/src/github.com/ethereum/go-ethereum/tests'
alias ethtrie='cd $GOPATH/src/github.com/ethereum/go-ethereum/trie'
alias ethw='cd $GOPATH/src/github.com/ethereum/go-ethereum/whisper/whisperv5'
alias ethwh='cd $GOPATH/src/github.com/ethereum/go-ethereum/whisper/whisperv5'

### trie

alias trie1='cd $GOPATH/src/github.com/stormasm/trie1'
alias trieget='go get github.com/davecgh/go-spew/spew; go get gopkg.in/check.v1'

#
#
### End Paths to ethereum cmd structure
#
#

### Grep commands
alias grhp2p='grep -RH "p2p." *'

#
### Curl commands as aliases
#
#
##  Note that you have to escape all of the quotes
#   See https://github.com/stormasm/ethereum-notes/blob/master/curl.md

alias block159395="curl -L "http://localhost:8545" -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockTransactionCountByNumber\",\"params\":[\"0x26ea3\"],\"id\":1}'"

alias block159400="curl -L "http://localhost:8545" -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockTransactionCountByNumber\",\"params\":[\"0x26ea8\"],\"id\":1}'"

### Start Whisper
##

alias wnodes1='wnode -boot=enode://d25474361659861e9e651bc728a17e807a3359ca0d344afd544ed0f11a31faecaf4d74b55db53c6670fd624f08d5c79adfc8da5dd4a11b9213db49a3b750845e@52.178.209.125:30379'

### End Whisper
##

### Start Swarm
##
#
# To bring up swarm run these 3 commands in order
#
# bn3
# gethboot1
# swarmrun

export SWARMDATA=/tmp67/swarm/bzz

# This creates a new account when you blow away /tmp67/swarm and start anew
alias swarmaccnew='geth --maxpeers 0 --datadir $SWARMDATA account new'

### Swarm set address that comes back from account new
export BZZKEY=96fd16590706b258ffdda746ad45c5674b61d6fa

alias swarmrun='swarm --bzzaccount $BZZKEY --datadir $SWARMDATA --ethapi /tmp67/why1/geth.ipc'

### End Swarm
##


################################## My P2p Functionality

######### package = protocols

alias p10='gtvr MultiplePeersDropSelf'
alias p11='gtvr MultiplePeersDropOther'

alias p12='gtvr ModuleHandshakeError'
alias p13='gtvr ModuleHandshakeSuccess'

alias p14='gtvr ProtoHandshakeVersionMismatch'
alias p15='gtvr ProtoHandshakeNetworkIdMismatch'
alias p16='gtvr ProtoHandshakeSuccess'

######### package = simulations

alias p1='gtvr Replay'
alias p2='gtvr TimedRead'

#### ethereum examples

alias ethex='cd $GOPATH/src/github.com/stormasm/ethereum-examples/rpc'
alias ethx='cd $GOPATH/src/github.com/stormasm/ethereum-examples/rpc'

#### Solc

alias sol1='solc --bin --output-dir ./out/ helloworld.sol'


alias solc='/tmp70/solidity/build/solc/solc'

### Setting for
# https://github.com/cubedro/eth-netstats
# Livenet
export WS_SECRET=a38e1e50b1b82fa
# Testnet
# export WS_SECRET=so8ku5jeza8du5tu
#

## Live Network is: a38e1e50b1b82fa
## Morden test network: so8ku5jeza8du5tu

alias ethdb='cd /Users/ma/Library/Ethereum'

