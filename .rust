
alias stable='rustup default stable'
alias stableinstall='rustup install stable'
alias nightly='rustup default nightly'
alias nightlyinstall='rustup install nightly'

alias rbin='cd /mia/rust/bin'

alias rback='RUST_BACKTRACE=1'
alias rbackfull='RUST_BACKTRACE=full'

### Find target directories

alias rfme='fd -I -t=d'
alias rftt='find . -name target'
alias rft='fd -I -t=d target$'

alias rf='rustfmt'
alias rp='rustpython'
alias rpg='cd /j/tmp28/RustPython'

### cargo commands

alias ca='cargo'
alias cben='cargo bench'
alias cbench='cargo bench'

alias cb='cargo build'
alias cbrel='cargo build --release'
alias cbndf='cargo build --no-default-features'

alias cbnu='cargo build --no-default-features --features=rustyline-support'
alias cbdf='cargo build --no-default-features --features=rustyline-support --features=dataframe'
alias cbdf2='cargo build --features=dataframe'

alias cbrl='cargo build --features=rustyline-support'

alias cdoc='cargo doc --no-deps --open'
alias localdoc='rustup doc'
alias cf='cargo fmt'
alias cn='cargo new'
alias cr='cargo run'
alias crb='cargo run --bin'

alias cre='cargo run --example'
alias cref='cargo run --features="runtime unstable-stream" --example'

alias crec='cargo run --example connect 127.0.0.1:8080'
alias cup='cargo update'
alias cv='cargo -V'

### https://github.com/timberio/vector

alias vc='cd /mia/vector-config'
alias crv='cargo run -- --config /mia/vector-config/vector.toml'
alias crvv='cargo run -- -vv --config /mia/vector-config/vector.toml'
alias crvx='cargo run -- --config'
alias vrun='vector --config /mia/vector-config/vector.toml'
alias vvrun='vector -vv --config /mia/vector-config/vector.toml'
alias vrunchk='vector -d -vv --config /mia/vector-config/vector.toml'

### https://github.com/meilisearch/MeiliES

alias mes='meilies-server --db-path /miarust/data/mes.edb'
alias mec='meilies-cli subscribe rick'
alias mep='meilies-cli publish rick blue'
alias mer='redisc -p 6480 publish rick blue'

alias ess='ess --db-path /miarust/data/mes.edb'
alias esc='esc subscribe rick'
alias esp='esc publish rick blue'

alias cess='cargo run -- --db-path /miarust/data/mes.edb'
alias cesc='cargo run subscribe rick'
alias cesp='cargo run publish rick blue'

#
# sled
#

alias sled='cd /j/tmp25/sled'

### https://github.com/sile/ekvsb

alias ekrun='ekvsb workload put --count 10 --value-size 10 | ekvsb run sled --dir /tmp41 | ekvsb summary'

### hyper example echo server testing

alias ech='curl localhost:3000/echo -XPOST -d'
alias echm='curl localhost:3000/mia -XPOST -d'
alias echr='curl localhost:3000/echo/reversed -XPOST -d'

### rust search and tantivy

alias ttclean='cd /tmp; rm -fr tantivy; mkdir tantivy'

alias tt='cd /tmp/tantivy'
alias ttc='cd /tmp00/tantivycli0redis'
alias tti='cargo run index --file ./data/j10.json --index /tmp/tantivy/wiki/'
alias ttr='cargo run redis --file ./data/j10.json --index /tmp/tantivy/wiki/'

alias tan='cd /tmp13/rust-search/tantivy/tan00'

alias cws='cargo-web start --port 3000'

### ripgrep
#
### https://github.com/BurntSushi/ripgrep/issues/193
#
### rgf pb   // search for all files with the pattern pb in lets say influxdb or bayard
#            // which both use protocol buffers
#
alias rgf='rg --files | rg'
alias rgt="rg 'cfg\(test\)'"
alias rgtest="rg 'cfg\(test\)'"
alias mr="rg 'macro_rules! '"

### arrow and parquet

export PARQUET_TEST_DATA=/j/tmp15/arrow/cpp/submodules/parquet-testing/data
export ARROW_TEST_DATA=/j/tmp15/arrow/testing/data

alias arex1='cre read_csv --features "prettyprint"'
alias arex2='cre read_csv_infer_schema --features "prettyprint"'
alias arex3='cre read_csv_ui --features "prettyprint"'

alias artop='cd /j/tmp25'

alias arc='artop; cd arrow/cpp'
alias arp='artop; cd arrow/python'
alias arr='artop; cd arrow/rust/arrow'
alias art='artop; cd arrow'

alias cmakear1='cmake -DCMAKE_BUILD_TYPE=Debug -DARROW_BUILD_TESTS=ON ..'
alias cmakear2='cmake -DCMAKE_BUILD_TYPE=Debug -DARROW_BUILD_TESTS=ON -DARROW_PARQUET=ON ..'

alias rgp='rgf "\.parquet"'

### serde
alias rgs='rg Serialize'

### canop/whalespotter.git
alias ws='whalespotter'

### gyscos/cursive
### go to the examples directory and add the example name
alias cce='cr --features cursive/crossterm-backend --bin'

#
### rust logging
#

alias loge='export RUST_LOG=error'
alias logw='export RUST_LOG=warn'
alias logi='export RUST_LOG=info'
alias logd='export RUST_LOG=debug'
alias logt='export RUST_LOG=trace'
alias loglevel='env | grep RUST_LOG'

#
### nushell
#

alias getnu='gc git@github.com:nushell/nushell.git'
alias getnustorm='gc git@github.com:stormasm/nushell.git'
alias gpnu='git pull https://github.com/nushell/nushell main'


alias nuconfig='nutop; cd ..; cd nuconfig'
alias nuconfigp='cd /Users/ma/Library/Application\ Support/org.nushell.nu'
alias nuconfigpath='cd /Users/ma/Library/Application\ Support/org.nushell.nu'
alias nuconfigsave='nuconfigp; cp config.toml /j/tmp26/nuconfig; nuconfig'
alias nuconfigr='nuconfigp; cp /j/tmp26/nuconfig/config.toml .'
alias nuconfigrefresh='nuconfigp; cp /j/tmp26/nuconfig/config.toml .'

#
# nutop is the latest code snapshot
#

alias nub='cd /j/tmp26/nubranch'
alias nubr='cd /j/tmp26/nubranch'
alias nutop='cd /j/tmp26/nushell'
alias nusc='cd /j/tmp26/nuscratch'
alias nutmp='cd /j/tmp26/nutmp'

alias nurunn='./target/debug/nu'

alias nurun='nutop; ./target/debug/nu --skip-plugins'
alias nuruns='cd /j/tmp26/nutmp/scripts; /j/tmp26/nushell/target/debug/nu --skip-plugins'

alias nurunp='nutop; ./target/debug/nu'
alias nuruni='nurun -l info'
alias nurund='nurun -l debug'
alias nurunt='nurun -l trace'
alias nuruntlog='nurun -l trace 2> log.txt'
alias nude='nutop; ./target/debug/nude --loglevel=debug'

alias nurundate='nurunt -c date'
alias nurunls='nurunt -c ls'

### Changing to various nushell crates

alias nuc='nutop; cd crates'
alias nucli='nutop; cd crates/nu-cli/src'
alias nucom='nutop; cd crates/nu-command/src'
alias nucomc='nutop; cd crates/nu-command/src/commands'
alias nucomt='nutop; cd crates/nu-command/tests'
alias nudata='nutop; cd crates/nu-data/src'
alias nuen='nutop; cd crates/nu-engine/src'
alias nueng='nutop; cd crates/nu-engine/src'
alias nup='nutop; cd crates/nu-parser/src'
alias nupro='nutop; cd crates/nu-protocol/src'
alias nusource='nutop; cd crates/nu-source/src'
alias nustr='nutop; cd crates/nu-stream/src'
alias nutest='nutop; cd crates/nu-test-support/src'

### Utils for working with nushell

alias cpcli='cp cli.rs /j/tmp24/nushelltmp/v18.2/tmp01; cd /j/tmp24/nushelltmp/v18.2/tmp01'
alias cpar='cp parse.rs /j/tmp25/nushelltmp/v19.0/tmp00; cd /j/tmp25/nushelltmp/v19.0/tmp00'

# Nushell Testing
#
alias ntalls='cargo test --all --features=stable'
alias ntallx='cargo test --all --features=extra'
#
#  Testing an individual nushell command
#   Type the command name after typing the alias
#   cargo test --package nu-cli --test main -- commands::<command_name_here>
alias ntcomall='cargo test --package nu-cli --test main -- commands::'
alias ntcom='cargo test --package nu-cli --test main -- '

# Nushell Scripts
alias nubug='nutop; cd ..; cd nubug/issue-3248'
alias nus='nutop; cd ..; cd nutmp/scripts'
alias nusc='nutop; cd ..; cd nuscratch'
alias nusd='nutop; cd ..; cd nushell_scripts'
alias nust='nutop; cd ..; cd nutmp/scripts/test'
alias nusn='nutop; cd ..; cd nu_scripts'

# Nushell Copy Cargolite.toml over to nutop
alias carcp='cp /j/tmp26/Cargo.toml /j/tmp26/nushell'

# Nushell Projects
alias nume='nutop; cd ..; cd nume'
alias nunotes='nutop; cd ..; cd nunotes'
alias nuproj='nutop; cd ..; cd nuproj'
alias peval='nuproj; cd parseval'

### mdbook

alias mdb='mdbook build'
alias mdc='mdbook clean'
alias mdd='mdbook build -d ./docs'
alias mds='mdbook serve'
alias mdserve='mdbook serve'
alias nn='cd /j/tmp19/nushell-notes'
alias bar='cd /j/tmp19/barnum'

#
# gluon
#
alias gli='gluon -i'

#
# zola
#

alias zs='zola serve'
alias zb='zola build'

#
# Rust Examples
#
alias rustex='cd /j/tmp25/rust-examples/logging/flexi'

#
# Special Case Nushell Testing
# You have to run the cta command first prior to running the tests
#

alias ct='cargo test'
alias ctno='cargo test -- --nocapture'

alias cth='ct commands::help'
alias cthno='ctno commands::help'

alias ctnoex='ctno commands::tests::examples_work_as_expected'

alias cta='cargo test --all --features=stable'
alias ct100='cargo test --package nu-cli --test main -- commands::each'

#
# delta
#
alias dtop='cd /j/tmp29/delta'
alias drun='dtop; ./target/debug/delta'

#
# tickrs
#
alias tickui='tickrs -s ui,ibm,nly'
